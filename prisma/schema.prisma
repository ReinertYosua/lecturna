generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Hero {
  id       String @id @default(cuid())
  title    String
  subtitle String
  image    String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Logo {
  id    String @id @default(cuid())
  image String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faq {
  id       String @id @default(cuid())
  question String @db.Text
  answer   String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model TrialClassRegistration {
  id             String             @id @default(cuid())
  childName      String
  dateOfBirth    DateTime
  birthPlace     String
  trialClassDate DateTime
  parentName     String
  email          String             @unique
  phoneNumber    String             @unique
  status         RegistrationStatus @default(PENDING)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Category {
  id             String @id @default(cuid())
  name           String @unique
  ageDescription String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]
}

model Program {
  id          String  @id @default(cuid())
  name        String  @unique
  subtitle    String?
  description String? @db.LongText
  image       String? @db.Text
  isPublished Boolean @default(false)

  courses Course[]

  user   Admin  @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Course {
  id               String  @id @default(cuid())
  name             String  @unique
  code             String? @unique
  description      String? @db.LongText
  programmingTools String? @db.Text
  level            Level?
  image            String? @db.Text
  isPublished      Boolean @default(false)

  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  programId String

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  registrations           CourseRegistration[]
  classes                 Class[]
  sessions                Session[]
  instructors             Instructor[]
  trialClassRegistrations TrialClassRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([programId])
  @@index([categoryId])
}

model Coupon {
  id String @id @default(cuid())

  name        String
  email       String
  phoneNumber String
  code        String @unique

  expiredAt DateTime

  registrations CourseRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseRegistration {
  id                   String             @id @default(cuid())
  childName            String
  dateOfBirth          DateTime
  birthPlace           String
  childGender          Gender
  gradeClass           String
  educationInstitution String
  parentName           String
  email                String             @unique
  phoneNumber          String             @unique
  address              String             @db.Text
  coupon               Coupon?            @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  couponId             String?
  status               RegistrationStatus @default(PENDING)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([couponId])
}

model Skill {
  id   String @id @default(cuid())
  name String

  instructorRegistrations InstructorRegistration[]
  instructors             Instructor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LastEducation {
  SMA
  S1
  S2
  S3
}

model InstructorRegistration {
  id                   String             @id @default(cuid())
  name                 String
  dateOfBirth          DateTime
  lastEducation        LastEducation
  educationInstitution String
  email                String             @unique
  phoneNumber          String             @unique
  address              String             @db.Text
  status               RegistrationStatus @default(PENDING)

  skills Skill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  ACTIVE
  BANNED
}

enum Role {
  ADMIN
  PARENT
  INSTRUCTOR
  STUDENT
}

model Account {
  id          String  @id @default(cuid())
  name        String
  username    String? @unique
  email       String  @unique
  password    String? @db.Text
  role        Role
  phoneNumber String? @unique
  image       String? @db.Text
  address     String? @db.Text
  status      Status  @default(ACTIVE)
  onboarded   Boolean @default(false)

  admin      Admin?
  instructor Instructor?
  parent     Parent?
  student    Student?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id String @id @default(cuid())

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId String  @unique

  programs Program[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
}

model Instructor {
  id                   String   @id @default(cuid())
  dateOfBirth          DateTime
  lastEducation        String
  educationInstitution String
  fileIDCard           String?
  fileNPWP             String?

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId String  @unique

  classes Class[]
  skills  Skill[]
  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
}



model Parent {
  id String @id @default(cuid())

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId String  @unique

  children Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
}

model Period {
  id        String   @id @default(cuid())
  name      String   @unique
  startDate DateTime
  endDate   DateTime

  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id   String @id @default(cuid())
  name String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String

  period   Period @relation(fields: [periodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  periodId String

  instructor   Instructor? @relation(fields: [instructorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instructorId String?

  students  Student[]
  schedules Schedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, periodId])
  @@index([instructorId])
  @@index([courseId])
  @@index([periodId])
}

model Session {
  id String @id @default(cuid())

  main        String  @db.LongText
  description String? @db.LongText
  reference   String? @db.LongText

  sessionNumber Int
  isPublished   Boolean @default(false)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String

  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Attachment {
  id       String @id @default(cuid())
  filename String
  fileUrl  String @db.Text
  fileType String

  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
}

model OtherAttachment {
  id      String @id @default(cuid())
  name    String
  type    String
  fileUrl String

  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scheduleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([scheduleId])
}

model Schedule {
  id            String    @id @default(cuid())
  sessionNumber Int
  date          DateTime?
  time          String?
  meetingUrl    String?   @db.LongText
  recordingUrl  String?   @db.LongText

  class            Class             @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId          String
  otherAttachments OtherAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classId])
}

model Student {
  id        String @id @default(cuid())
  studentId String @unique

  dateOfBirth          DateTime
  birthPlace           String
  gender               Gender
  gradeSchool          String
  educationInstitution String
  hobby                String
  ambition             String

  parent   Parent @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId String

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId String  @unique

  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
  @@index([accountId])
}
